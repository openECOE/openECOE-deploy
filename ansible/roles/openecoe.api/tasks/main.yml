- name: Install Redis
  include_role:
    name: geerlingguy.redis
  vars:
    redis_port: 6379
    redis_bind_interface: 127.0.0.1
    redis_loglevel: "{{api_redis_loglevel}}"
    redis_logfile: /var/log/redis/redis-server.log

- name: Get project {{project_main_controller}} from Github ({{git_repo}})
  include_role:
    name: production.git-pull
  vars:
    git_pull_owner: "{{git_owner}}"
    git_pull_repo: "{{git_repo}}"
    git_pull_branch: "{{git_branch}}"
    git_pull_path: "{{project_path}}"
  when: env != 'local'
  register: git_finished

- name: Create .env configuration file
  template:
    src: env_template
    dest: "{{project_path}}/.env"
    mode: 0644

- name: make sure git is installed
  apt:
    name: git
    state: present
    update_cache: yes

- name: make sure 'setuptools' package is installed
  pip:
    name: setuptools == 44
    virtualenv: "{{ venv_path }}"
    virtualenv_python: python3
  tags: [python]

- name: Create virtualenv
  pip:
    virtualenv: "{{ venv_path }}"
    virtualenv_python: python3
    requirements: "{{ requirements_path }}"
  tags: virtualenv

- name: Restore database if dump present
  block:
    - pause:
        prompt: "Are you sure you want to recover {{database_name}} with {{sql_dump}} (yes/no)?"
      register: recover_database

    - include_tasks: restore_database.yml
      when: recover_database.user_input | bool
  when: sql_dump is defined

- name: Upgrade API DB
  shell: "{{ venv_path }}/bin/flask db upgrade"
  args:
    chdir: "{{project_path}}"
  environment:
    FLASK_APP: "{{project_main_controller}}.py"
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
  tags: upgradeAPIDB

- name: Create Organization '{{organization}}'
  block:
    - shell: "{{ venv_path }}/bin/flask create_orga --name '{{organization}}'"
      args:
        chdir: "{{project_path}}"
      environment:
        FLASK_APP: "{{project_main_controller}}.py"
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
      tags: createorga
  rescue:
    - debug:
        msg: "Organization exists"

- name: Create default admin users
  block:
    - shell: "{{ venv_path }}/bin/flask create_user --email '{{item.value.email}}' --password '{{item.value.password}}' --name  '{{item.value.name}}' --surname '{{item.value.surname}}' --organization_name '{{organization}}' --admin"
      args:
        chdir: "{{project_path}}"
      environment:
        FLASK_APP: "{{project_main_controller}}.py"
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
      tags: createusers
      with_dict: "{{admin_users}}"
  rescue:
    - shell: "{{ venv_path }}/bin/flask create_user --email '{{item.value.email}}' --password '{{item.value.password}}' --name  '{{item.value.name}}' --surname '{{item.value.surname}}' --admin"
      args:
        chdir: "{{project_path}}"
      environment:
        FLASK_APP: "{{project_main_controller}}.py"
        LC_ALL: C.UTF-8
        LANG: C.UTF-8
      tags: createusers
      with_dict: "{{admin_users}}"

- name: Create nginx hosts
  when: env != 'local'
  include_role:
    name: production.nginx
  ignore_errors: yes

- name: Create supervisor process
  when: env != 'local'
  include_role:
    name: production.supervisor